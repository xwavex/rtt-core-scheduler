import("rtt-core-scheduler");
import("eigen_typekit");
import("kdl_typekit");
import("rst-rt_typekit");
import("stdint");
import("rtt-core-extensions");

### Service
loadService("this","CoreSchedulerService");

### Introspection
loadComponent("ir", "cosima::IntrospectionReporter");
setActivityOnCPU("ir",0,1,ORO_SCHED_OTHER,3);

### CoreScheduler 1
loadComponent("CS1", "cosima::CoreScheduler");
setActivityOnCPU("CS1", 0, 5, ORO_SCHED_OTHER, 0);
CS1.introspection.enableAllIntrospection(true);
CS1.introspection.setCallTraceStorageSize(400);
CS1.introspection.sendAtLeastOncePerXms(1000);
CS1.introspection.enableAutoWriteExecutionInformation(false);

### CoreScheduler 2
loadComponent("CS2", "cosima::CoreScheduler");
setActivityOnCPU("CS2", 0, 5, ORO_SCHED_OTHER, 1);
CS2.introspection.enableAllIntrospection(true);
CS2.introspection.setCallTraceStorageSize(400);
CS2.introspection.sendAtLeastOncePerXms(1000);
CS2.introspection.enableAutoWriteExecutionInformation(false);

### Components
loadComponent("R", "Receiver");
R.introspection.enableAllIntrospection(true);
R.introspection.setCallTraceStorageSize(400);
R.introspection.sendAtLeastOncePerXms(1000);
R.introspection.enableAutoWriteExecutionInformation(false);
R.configure();

loadComponent("S", "Sender");
S.introspection.enableAllIntrospection(true);
S.introspection.setCallTraceStorageSize(400);
S.introspection.sendAtLeastOncePerXms(1000);
S.introspection.enableAutoWriteExecutionInformation(false);
S.configure();

loadComponent("SSS", "Sender");
SSS.introspection.enableAllIntrospection(true);
SSS.introspection.setCallTraceStorageSize(400);
SSS.introspection.sendAtLeastOncePerXms(1000);
SSS.introspection.enableAutoWriteExecutionInformation(false);
SSS.configure();

### Configure with service
CoreSchedulerService.setInvolvedCoreScheduler(strings("CS1", "CS2"));
CoreSchedulerService.setExecutionOrder("CS1", strings("S", "R"));
CoreSchedulerService.setExecutionOrder("CS2", strings("SSS"));
CoreSchedulerService.setLastComponentInPTG("R");

# Receiver is constrained by the Sender S and SSS.
CoreSchedulerService.addPTGFormula("S", "R");
#CoreSchedulerService.addPTGFormula("SSS", "R");

CoreSchedulerService.configure();

connectPeers("ir","CS1");
connectPeers("ir","CS2");
connectPeers("ir","S");
connectPeers("ir","R");
connectPeers("ir","SSS");
ir.configure();
ir.start();

CS1.start();
CS2.start();
